@using CommunityToolkit.Maui.Core.Platform
@using CommunityToolkit.Maui.Core

@inject IJSRuntime JS

@page "/options"

<FluentDesignTheme @bind-Mode="@Mode" CustomColor="#ffc107" StorageName="mytheme" />

<h3>Options</h3>

<button class="button-yellow" @onclick="CheckInternet">Check Internet</button>

<!-- button class="button-yellow" @onclick="ChangeTheme">Change Theme</!button -->
<FluentMenuButton Text="Select theme color" OnMenuChanged="HandleOnMenuChanged">
    <FluentMenuItem Id="1">Light</FluentMenuItem>
    <FluentMenuItem Id="2">Dark</FluentMenuItem>
    <FluentMenuItem Id="0">System</FluentMenuItem>
</FluentMenuButton>

<p class="optionstheme">Selected Theme: @selectedTheme</p>

@code {
    public async Task CheckInternet()
    {
        var hasInternet = Connectivity.Current.NetworkAccess == NetworkAccess.Internet;
        var internetType = Connectivity.Current.ConnectionProfiles.FirstOrDefault();

        await ((Application)app).Windows[0].Page!.DisplayAlert("Connectivity Status",
            $"Internet access: {hasInternet} of type {internetType}", "OK");
    }

    // public async Task ChangeTheme()
    // {
    //     await JS.InvokeVoidAsync("setTheme", "dark");
    // }
    // private string selectedTheme = string.Empty;

    // public async Task HandleOnMenuChanged(MenuChangeEventArgs args)
    // {
    //     selectedTheme = args.Id ?? "1";
    //     Debug.WriteLine($"Selected Value: {args.Id}");
    //     var selectedValue = args.Id;

    //     if (string.Equals(selectedValue,"2"))
    //     {
    //         await JS.InvokeVoidAsync("setTheme", "dark");
    //     }
    //     else if(string.Equals(selectedValue,"1"))
    //     {
    //         await JS.InvokeVoidAsync("setTheme", "light");
    //     }
    //     else
    //     {
    //         AppTheme currentTheme = ((Application)app).RequestedTheme;
    //         Debug.WriteLine("Current System Theme : " + currentTheme.ToString());
        
    //         if(currentTheme == AppTheme.Dark)
    //         {
    //             await JS.InvokeVoidAsync("setTheme", "dark");
    //         }
    //         else
    //         {
    //             await JS.InvokeVoidAsync("setTheme", "light");
    //         }
    //     }
    // }

    private string selectedTheme;

// Added
public DesignThemeModes Mode { get; set; } = DesignThemeModes.Light;

// public async Task HandleOnMenuChanged(MenuChangeEventArgs args)
// {
//     selectedTheme = args.Id ?? "1";
//     Debug.WriteLine($"Selected Value: {args.Id}");
//     var selectedValue = args.Id;

//     if (String.Equals(selectedValue,"2"))
//     {
//         // Added
//         Mode = DesignThemeModes.Dark;
//         await JS.InvokeVoidAsync("setTheme", "dark");
//     }
//     else if(String.Equals(selectedValue,"1"))
//     {
//         // Added
//         Mode = DesignThemeModes.Light;
//         await JS.InvokeVoidAsync("setTheme", "light");
//     }
//     else
//     {
//         // Added
//         Mode = DesignThemeModes.System;
//         AppTheme currentTheme = ((Application)app).RequestedTheme;
//         Debug.WriteLine("Current System Theme : " + currentTheme.ToString());

//         if(currentTheme == AppTheme.Dark)
//         {
//             await JS.InvokeVoidAsync("setTheme", "dark");
//         }
//         else
//         {
//             await JS.InvokeVoidAsync("setTheme", "light");
//         }
//     }
// }

public async Task HandleOnMenuChanged(MenuChangeEventArgs args)
{
    selectedTheme = args.Id ?? "1";
    Debug.WriteLine($"Selected Value: {args.Id}");
    var selectedValue = args.Id;

    if (string.Equals(selectedValue, "2"))
    {
        Mode = DesignThemeModes.Dark;
        await JS.InvokeVoidAsync("setTheme", "dark");
        ((Application)app).UserAppTheme = AppTheme.Dark; // This was added, we will get to it in a minute

        // This whole block was added
        if (DeviceInfo.Platform == DevicePlatform.Android || DeviceInfo.Platform == DevicePlatform.iOS)
        {
            StatusBar.SetColor(Microsoft.Maui.Graphics.Color.FromArgb("#444034"));
            StatusBar.SetStyle(StatusBarStyle.LightContent);
        }
    }
    else if (string.Equals(selectedValue, "1"))
    {
        Mode = DesignThemeModes.Light;
        await JS.InvokeVoidAsync("setTheme", "light");
        ((Application)app).UserAppTheme = AppTheme.Light; // This was added, we will get to it in a minute

        // This whole block was added
        if (DeviceInfo.Platform == DevicePlatform.Android || DeviceInfo.Platform == DevicePlatform.iOS)
        {
            StatusBar.SetColor(Microsoft.Maui.Graphics.Color.FromArgb("#DDAF24"));
            StatusBar.SetStyle(StatusBarStyle.DarkContent);
        }
    }
    else
    {
        Mode = DesignThemeModes.System;
        AppTheme currentTheme = ((Application)app).RequestedTheme;
        Debug.WriteLine("Current System Theme : " + currentTheme.ToString());

        if (currentTheme == AppTheme.Dark)
        {
            await JS.InvokeVoidAsync("setTheme", "dark");

            // This whole block was added
            if (DeviceInfo.Platform == DevicePlatform.Android || DeviceInfo.Platform == DevicePlatform.iOS)
            {
                StatusBar.SetColor(Microsoft.Maui.Graphics.Color.FromArgb("#444034"));
                StatusBar.SetStyle(StatusBarStyle.LightContent);
            }
        }
        else
        {
            await JS.InvokeVoidAsync("setTheme", "light");

            // This whole block was added
            if (DeviceInfo.Platform == DevicePlatform.Android || DeviceInfo.Platform == DevicePlatform.iOS)
            {
                StatusBar.SetColor(Microsoft.Maui.Graphics.Color.FromArgb("#DDAF24"));
                StatusBar.SetStyle(StatusBarStyle.DarkContent);
            }
        }
    }
}

}
